import streamlit as st

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Comparador de Descontos", layout="centered")
st.title("üí∏ Comparador de Descontos")

# --- Defini√ß√£o dos valores padr√£o iniciais ---
DEFAULTS = {
    'aluguer': 280.0,
    'perc_aluguer': 7.0,
    'seguro': 45.0,
    'perc_seguro': 12.0,
    'manutencao': 20.0
}

# Inicializa o estado da sess√£o com os valores padr√£o, se ainda n√£o existirem
for key, value in DEFAULTS.items():
    if f'default_{key}' not in st.session_state:
        st.session_state[f'default_{key}'] = value

# --- Entradas do Usu√°rio ---
st.header("Entradas do Usu√°rio")

apuro = st.number_input("üí∞ Apuro total (‚Ç¨)", min_value=0.0, value=800.0, step=10.0, help="O valor total bruto que voc√™ recebeu.")
desc_combustivel = st.number_input("‚õΩ Desconto de Combust√≠vel (‚Ç¨)", min_value=0.0, value=200.0, step=1.0, help="O valor que voc√™ gasta com combust√≠vel e que √© deduzido do apuro.")

st.markdown("---")

# --- L√≥gica para mostrar as op√ß√µes ---
st.header("Op√ß√µes da Empresa")

# Bot√£o para alternar a visibilidade dos campos de entrada
if st.button("Modificar Op√ß√µes Padr√£o"):
    st.session_state.show_inputs = not st.session_state.get('show_inputs', False)

def save_defaults():
    """Fun√ß√£o de callback para salvar os valores dos inputs como novos padr√µes."""
    st.session_state.default_aluguer = st.session_state.aluguer_input
    st.session_state.default_perc_aluguer = st.session_state.perc_aluguer_input
    st.session_state.default_seguro = st.session_state.seguro_input
    st.session_state.default_perc_seguro = st.session_state.perc_seguro_input
    st.session_state.default_manutencao = st.session_state.manutencao_input
    st.success("Novos valores padr√£o salvos com sucesso!")

if st.session_state.get('show_inputs', False):
    # Colunas para organizar as op√ß√µes lado a lado
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Op√ß√£o 1")
        st.number_input("üè† Aluguer (‚Ç¨)", min_value=0.0, value=st.session_state.default_aluguer, step=1.0, key='aluguer_input')
        st.number_input("üëî Percentual (%)", min_value=0.0, value=st.session_state.default_perc_aluguer, step=0.5, key='perc_aluguer_input')
    with col2:
        st.subheader("Op√ß√£o 2")
        st.number_input("üõ°Ô∏è Seguro (‚Ç¨)", min_value=0.0, value=st.session_state.default_seguro, step=1.0, key='seguro_input')
        st.number_input("üëî Percentual (%)", min_value=0.0, value=st.session_state.default_perc_seguro, step=0.5, key='perc_seguro_input')
        st.number_input("üõ†Ô∏è Manuten√ß√£o (‚Ç¨)", min_value=0.0, value=st.session_state.default_manutencao, step=1.0, key='manutencao_input')
        
    # Novo bot√£o para salvar as altera√ß√µes padr√£o
    st.button("üíæ Salvar Altera√ß√µes Padr√£o", on_click=save_defaults)

else:
    st.info("Valores padr√£o das op√ß√µes est√£o sendo usados. Clique no bot√£o acima para modific√°-los.")

st.markdown("---")

# Bot√£o para iniciar o c√°lculo
if st.button("Calcular üîπ", type="primary"):
    # Subtrair combust√≠vel do apuro para obter o valor l√≠quido
    apuro_liquido = apuro - desc_combustivel
    
    # Pega os valores atuais (padr√£o ou modificados e salvos)
    aluguer_atual = st.session_state.default_aluguer
    perc_aluguer_atual = st.session_state.default_perc_aluguer
    seguro_atual = st.session_state.default_seguro
    perc_seguro_atual = st.session_state.default_perc_seguro
    manutencao_atual = st.session_state.default_manutencao

    # C√°lculo do que sobra em cada op√ß√£o
    sobra_opcao1 = apuro_liquido - (apuro * perc_aluguer_atual / 100) - aluguer_atual
    sobra_opcao2 = apuro_liquido - (apuro * perc_seguro_atual / 100) - seguro_atual - manutencao_atual
    
    st.subheader("üìä Resultados:")
    st.metric("Apuro L√≠quido", f"{apuro_liquido:,.2f} ‚Ç¨", help="Apuro total menos o desconto de combust√≠vel.")
    st.markdown("---")

    # Exibir resultados detalhados
    st.markdown("### Vis√£o Geral")
    col3, col4 = st.columns(2)
    with col3:
        st.metric(f"Sobra na Op√ß√£o 1", f"{sobra_opcao1:,.2f} ‚Ç¨")
    with col4:
        st.metric(f"Sobra na Op√ß√£o 2", f"{sobra_opcao2:,.2f} ‚Ç¨")
    
    # Determinar e exibir a melhor op√ß√£o
    if sobra_opcao1 > sobra_opcao2:
        st.success(f"üéâ A **Op√ß√£o 1** √© a melhor escolha, com uma diferen√ßa de **{(sobra_opcao1 - sobra_opcao2):,.2f} ‚Ç¨**.")
    elif sobra_opcao2 > sobra_opcao1:
        st.success(f"üéâ A **Op√ß√£o 2** √© a melhor escolha, com uma diferen√ßa de **{(sobra_opcao2 - sobra_opcao1):,.2f} ‚Ç¨**.")
    else:
        st.info("As duas op√ß√µes resultam no mesmo valor.")
        
    st.markdown("---")
    
    # Detalhe dos c√°lculos
    st.markdown("### Detalhes dos C√°lculos")
    st.markdown(f"""
    **C√°lculo da Op√ß√£o 1:**
    * Apuro L√≠quido: {apuro_liquido:,.2f} ‚Ç¨
    * Dedu√ß√£o da Empresa: {apuro:,.2f} ‚Ç¨ * ({perc_aluguer_atual} / 100) = **{(apuro * perc_aluguer_atual / 100):,.2f} ‚Ç¨**
    * Dedu√ß√£o de Aluguer: **{aluguer_atual:,.2f} ‚Ç¨**
    * **Valor Final:** {apuro_liquido:,.2f} - {(apuro * perc_aluguer_atual / 100):,.2f} - {aluguer_atual:,.2f} = **{sobra_opcao1:,.2f} ‚Ç¨**
    """)
    
    st.markdown(f"""
    **C√°lculo da Op√ß√£o 2:**
    * Apuro L√≠quido: {apuro_liquido:,.2f} ‚Ç¨
    * Dedu√ß√£o da Empresa: {apuro:,.2f} ‚Ç¨ * ({perc_seguro_atual} / 100) = **{(apuro * perc_seguro_atual / 100):,.2f} ‚Ç¨**
    * Dedu√ß√£o de Seguro: **{seguro_atual:,.2f} ‚Ç¨**
    * Dedu√ß√£o de Manuten√ß√£o: **{manutencao_atual:,.2f} ‚Ç¨**
    * **Valor Final:** {apuro_liquido:,.2f} - {(apuro * perc_seguro_atual / 100):,.2f} - {seguro_atual:,.2f} - {manutencao_atual:,.2f} = **{sobra_opcao2:,.2f} ‚Ç¨**
    """)
